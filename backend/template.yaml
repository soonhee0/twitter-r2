AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9

  Sample SAM Template for backend

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
# パラメーターを使用するとテンプレートにカスタム値を入力できる（変数のようなもの）
Parameters:
  StageName:
    Type: "String"
    Default: "v1"
  TweetsTableName:
    Type: String
    Default: "Tweets"
  LogRetentionInDays:
    Type: Number
    Default: 1

Resources:
  MyApi:
    # HTTPS エンドポイント経由で呼び出すことができる Amazon API Gateway リソースを作成
    Type: AWS::Serverless::Api
    Properties:
      # StageName: URIの最初のパスセグメントとして使用するステージの名前
      # !Ref関数は指定したパラメータの値を返す
      StageName: !Ref StageName # Parametersの参照
      MethodSettings:
        - DataTraceEnabled:
            false # Amazon CloudWatch Logsに出力するか。本番APIは機密データ保持の観点からfalseが推奨されている
            # 複数のリソースとメソッドに設定を適用するには、HttpMethod にアスタリスク (*) を、ResourcePath に /* を指定する
          # 複数のリソースとメソッドに設定を適用するには、HttpMethod にアスタリスク (*) を、ResourcePath に /* を指定する
          ResourcePath: "/*"
          HttpMethod: "*"
      # すべての API Gateway API のクロスオリジンリソース共有 (CORS) を管理
      Cors:
        # 指定されたオリジンからのリクエストを行うコードでレスポンスが共有できるかどうか
        AllowOrigin: "'*'"
        # レスポンスをフロントエンドの JavaScript コードに公開するかどうか
        AllowCredentials: false
        # 許可するHTTPメソッド(今回の教材はOPTIONSとPOSTのみ)
        AllowMethods: "'OPTIONS,POST'"
        #  Access-Control-Request-Headers を含むプリフライトリクエストへのレスポンスで、実際のリクエストの間に使用できる HTTP ヘッダーを示すために使用
        # プリフライトリクエストについて: WebサーバがCORS要求を受け付けるかどうかを実際に要求を送信する前に確かめること。クライアントからOPTIONSメソッドのHTTPリクエストを送信する。だからAllowMethodsでOPTIONSを設定しています。
        AllowHeaders: "'Content-Type,X-CSRF-TOKEN,Access-Control-Allow-Origin'"
  TweetActionFunction:
    Type: AWS::Serverless::Function # aws lambda function
    Properties:
      # DynamoDBへのフルアクセス権限を与える(CRUDの全てが可能ということ)
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      PackageType: Image # Docker Imageからlambdaを作成するという意味
      Events:
        TweetActionCreate:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/create_tweet
            Method: post
        TweetActionFetch:
          Type: Api # api gateway経由でイベントを受け取る
          Properties:
            RestApiId: !Ref MyApi # 上記で作成したapi gatewayを参照
            # このパスのイベントを受け取ったときにTweetActionFetchラムダを実行
            Path: /api/fetch_tweet
            # httpメソッドはPOSTを利用する
            Method: post
      Environment:
        Variables:
          # dynamoDBのエンドポイント
          DYNAMO_ENDPOINT_URL: "http://dynamodb.ap-northeast-1.amazonaws.com"
    Metadata:
      # 参照するDockerfileについて
      Dockerfile: ./tweet/Dockerfile
      DockerContext: ./
      DockerTag: python3.9-v1
  # cloud watchの設定
  TweetActionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TweetActionFunction}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: TwitterLikeSnsDeveloper
          Value: Green

  GeneratePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - S3CrudPolicy:
            BucketName: twitter-like-storage-kyou1
      PackageType: Image
      Events:
        GeneratePresignedUrl:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/upload_url
            Method: post
        GenerateDownloadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/download_url
            Method: post
      Environment:
        Variables:
          S3_BUCKET_NAME: "twitter-like-storage-kyou1"
          S3_ENDPOINT_URL: "https://s3.ap-northeast-1.amazonaws.com"
    Metadata:
      Dockerfile: ./presigned_url/Dockerfile
      DockerContext: ./
      DockerTag: python3.9-v1

  GeneratePresignedUrlLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GeneratePresignedUrlFunction}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: TwitterLikeSnsDeveloper
          Value: Green

  Tweets:
    Type: AWS::DynamoDB::Table # dynamo db
    Properties:
      TableName: !Ref TweetsTableName
      AttributeDefinitions: # テーブルとインデックスのキースキーマを記述する属性
        - AttributeName: user_id # 属性名
          AttributeType: S # 属性のデータ型,S-は文字列型,Nは数値型,Bはバイナリ型
        - AttributeName: id
          AttributeType: S
      KeySchema: # テーブルのプライマリキーを構成する属性
        # RDBと違ってdynamodbはパーティションキー(RDBでいうPrimary Keyのようなもの)とソートキーの2つしかキーを持てません。
        - AttributeName: user_id
          KeyType: HASH # HASH - パーティションキー
        - AttributeName: id
          KeyType: RANGE # RANGE - ソートキー
      BillingMode: PAY_PER_REQUEST #  1秒あたりに数千ものリクエストを処理できる柔軟な請求オプションで利用した分だけ課金計算される仕組み
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true # 35日前~5分前の時点のテーブル内容を復元できる機能
  # スタックの作成または更新後に表示される情報を定義するために使用

  S3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: twitter-like-storage-kyou1
      VersioningConfiguration: # バージョニングを有効化
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
            AllowedOrigins:
              - "https://twitter-r2-y1z4.vercel.app"
              # - "https://twitter-clone.vercel.app" # vercelにデプロイ後に正しいURLに更新すること
            MaxAge: 3000
Outputs:
  FetchTweetApi:
    Description: "API Gateway endpoint URL for Prod stage for TweetAction function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/fetch_tweet/" # 出力する情報の値(ツイート取得APIのエンドポイント)
  CreateTweetApi:
    Description: "API Gateway endpoint URL for Prod stage for TweetAction function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/create_tweet/"
  GeneratePresignedUrlApi:
    Description: "API Gateway endpoint URL for Prod stage for Generate Presigned Url function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/upload_url/"
  GenerateDownloadUrlApi:
    Description: "API Gateway endpoint URL for Prod stage for Generate Download Url function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/download_url/"
  TweetActionFunction:
    Description: "Tweet Action Function Lambda Function ARN"
    Value: !GetAtt TweetActionFunction.Arn # ArnとはAWS リソースを一意に識別するもの。（TweetActionFunctionラムダのArn）
  TweetActionFunctionIamRole:
    Description: "Implicit IAM Role created for Tweet Action Function function"
    # Lambda 関数の実行ロールは、AWS サービスおよびリソースにアクセスする許可を関数に付与する AWS Identity and Access Management (IAM) ロールである。
    Value: !GetAtt TweetActionFunctionRole.Arn
  GeneratePresignedUrlFunctionIamRole:
    Description: "Implicit IAM Role created for Generate Presigned Url function"
    Value: !GetAtt GeneratePresignedUrlFunctionRole.Arn
